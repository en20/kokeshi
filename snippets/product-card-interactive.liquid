{% liquid
  assign button_class = settings.buy_button_color | append: ' ' | append: settings.buy_button_style | append: ' ' | append: settings.buy_button_size

  assign loading = 'eager'
  assign fetchpriority = 'auto'
  if section.index == 1
    assign fetchpriority = 'high'
  elsif section.index > 2
    assign loading = 'lazy'
  endif
  assign image_class = 'product-image image w-full object-cover '
  if section.settings.image_ratio != blank
    assign image_class = image_class | append: section.settings.image_ratio
  elsif settings.product_card_image_ratio != blank
    assign image_class = image_class | append: settings.product_card_image_ratio
  else
    assign image_class = image_class | append: 'aspect-[3/4]'
  endif
  assign image_class_scale = image_class | append: ' scale-110'
%}
<div
  x-data="
    {
      loading: false,
      openModal: false,
      variant: '{{ product.selected_or_first_available_variant.id }}',
      quantity: 1,
      currentVariant: {{ product.selected_or_first_available_variant | json | escape }},
      selectedOptions: {{ product.selected_or_first_available_variant.options | json | escape }},
      productVariants: {{ product.variants | json | escape }},
      async updateProductCard(productHandle = '') {
        this.loading = true

        if (productHandle != ''){
          await fetch(`/products/${productHandle}?view=product-card&variant=${$data.currentVariant.id}`)
          .then(response => {
            if (response.status !== 200) {
              throw new Error(response.statusText)
            } else {
              return response.text()
            }
          })
          .then(cartData => {
            const html = new DOMParser().parseFromString(cartData, 'text/html')
            const htmlString = html.querySelector('div').outerHTML
            $refs.productCard.innerHTML = htmlString
            this.loading = false
          })
          .catch((error) => {
            console.error(error)
            this.loading = false
          })
        }else {
          await fetch(`/products/{{ product.handle }}?view=product-card&variant=${$data.currentVariant.id}`)
          .then(response => {
            if (response.status !== 200) {
              throw new Error(response.statusText)
            } else {
              return response.text()
            }
          })
          .then(cartData => {
            const html = new DOMParser().parseFromString(cartData, 'text/html')
            const htmlString = html.querySelector('div').outerHTML
            $refs.productCard.innerHTML = htmlString
            this.loading = false
          })
          .catch((error) => {
            console.error(error)
            this.loading = false
          })
        }

      },
      async updateVariant() {
        $data.currentVariant = $data.productVariants.find((variant) => {
            return !variant.options.map((option, index) => {
              return $data.selectedOptions[index] === option
            }).includes(false)
          })

        this.updateProductCard();
      },
      handleAdd(type = 'add') {
        this.loading = true

        const items = [{ id: this.currentVariant.id, quantity: this.quantity }]

        $store.cart.addItems(items, { showCart: (type == 'add' ? true : false) })
        .then(response => {
          this.loading = false

          {% if settings.cart_type != 'side' %}
            $dispatch('show-notification', { type: 'success', title: '{{ 'common.notification.cart' | t }}', description: '{{ 'common.notification.add_success' | t }}' })
          {% endif %}

          $dispatch('cart-change')

          $store.cart.fetchItems()

          if (type == 'buy') {
            window.location.href = '/checkout'
          }

          Log('Add to Cart:', response)
        })
      }
    }
  "
  {% if section.settings.button_action != 'go-to-product' %}
    x-init="$watch('selectedOptions', () => updateVariant());"
  {% endif %}
  x-ref="productCard"
  {% if section.settings.button_action == 'go-to-product' %}
    @click="window.location.href='{{ product.selected_or_first_available_variant.url | default: product.url }}'"
    :class="
      {
        'cursor-pointer': true
      }
    "
  {% endif %}
  class="product-card card flex flex-col overflow-auto {{ settings.card_bg_color }} {{ settings.box_border_radius }} {% if settings.show_border == true %} {{ settings.box_border_size }} {% else %} border-none {% endif %} {{ settings.box_border_color }}"
>
  <div
    x-cloak
    x-show="openModal"
    x-ref="modal"
    x-transition:enter="transition-opacity ease-out duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity ease-in duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    class="fixed inset-0 isolate z-10 flex items-end justify-center"
  >
    <div class="absolute inset-0 bg-black/70"></div>
    <div class="z-20 mx-auto h-fit w-full max-w-screen-md rounded bg-white shadow-lg md:h-[calc(100%-10.25rem)]">
      <div class="flex items-center justify-end bg-gray-100 px-8 py-4">
        <button type="button" @click="openModal = false" class="text-gray-600">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6 18L18 6M6 6L18 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
      <div class="mt-4 flex h-[calc(100%-10.25rem)] w-full flex-col gap-4 overflow-y-auto px-8 py-4 md:h-[calc(100%-11rem)]">
        <div class="flex gap-4">
          <div class="aspect-square w-20">
            {{
              product.featured_image
              | image_url: width: 600
              | image_tag: loading: loading, fetchpriority: fetchpriority, class: image_class
            }}
          </div>
          <div class="flex flex-col gap-1">
            <a
              aria-label="{{ product.title }}"
              href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
            >
              <span class="product-title {{ settings.title_color }} {{ settings.title_size }}">
                {{- product.title -}}
              </span>
            </a>
            {% assign installments = settings.installments_number %}
            {% assign product_variant = product.selected_or_first_available_variant %}
            <div class="flex items-center gap-1">
              <span class="price whitespace-nowrap font-bold {{ settings.price_color }} {{ settings.price_size }}">
                {{ product_variant.price | money }}
              </span>
              {% if installments > 1 %}
                {% liquid
                  assign price = product.selected_or_first_available_variant.price | default: 0

                  assign installments_max = price | divided_by: settings.installments_min_price | divided_by: 100 | round: 2 | at_most: settings.installments_number
                  assign installment_fees = price | times: settings.installments_percentage_fees | divided_by: 100
                  assign installment_price = price | plus: installment_fees | divided_by: installments_max

                  assign value = installment_price | money
                %}
                {%- if installments_max > 1 -%}
                  <p class="installments {{ settings.text_color }} {{ settings.text_size }}">
                    {{ 'snippets.product_card.installments_value_2' | t: installments: installments_max, value: value }}
                  </p>
                {%- endif -%}
              {% endif %}
            </div>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          {%- unless product.has_only_default_variant -%}
            {%- for option in product.options_with_values -%}
              {% assign index = forloop.index0 %}
              <fieldset
                class="flex flex-col gap-2"
                id="ProductSelect-option-modal-{{ forloop.index0 }}-{{ section.id }}"
                name="{{ option.name | handleize }}"
              >
                <span class="{{ section.settings.variant_title_size }} {{ section.settings.variant_title_color }} font-bold">
                  {{ option.name | escape }}
                </span>
                <div class="flex flex-wrap">
                  {%- for value in option.values -%}
                    {% liquid
                      assign option_variants = product.variants
                      for option_index in (1..index)
                        assign option_index0 = option_index | minus: 1
                        assign option_where = 'option' | append: option_index
                        assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                      endfor
                      assign index1 = index | plus: 1
                      assign option_where = 'option' | append: index1
                      assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                    %}
                    <input
                      type="radio"
                      {% if option.selected_value == value %}
                        checked="checked"
                      {% endif %}
                      {% if available_option_variants_size <= 0 %}
                        disabled="disabled"
                      {% endif %}
                      value="{{ value | escape }}"
                      data-index="option{{ forloop.index }}"
                      name="{{ option.name | handleize }}"
                      id="ProductSelect-option-modal-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                      class="hidden"
                      x-model="selectedOptions[{{ index }}]"
                    >
                    <label
                      class="selector button {{ button_class }} {{ section.settings.variant_width }} {% if available_option_variants_size <= 0 %}cursor-default border-none bg-neutral-400 text-neutral-600{% elsif option.selected_value == value %}button-primary cursor-pointer text-white{% else %}button-white cursor-pointer text-accent{% endif %}"
                      for="ProductSelect-option-modal-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                    >
                      {{ value | escape }}
                    </label>
                  {%- endfor -%}
                </div>
              </fieldset>
            {%- endfor -%}
          {%- endunless -%}
        </div>

        <button
          {% if product.available %}
            {% if section.settings.button_action != 'go-to-product' %}
              @click="handleAdd()"
            {% endif %}
            :disabled="loading"
          {% else %}
            disabled
          {% endif %}
          class="button w-full {{ button_class }}"
        >
          {% render 'loading-spinner' %}
          <div x-show="!loading">
            {% if product.available %}
              {{ section.settings.product_button_text | default: settings.buy_button_label }}
            {% else %}
              {{ 'common.sold_out' | t }}
            {% endif %}
            <span class="sr-only">{{ product.title }}</span>
          </div>
        </button>
      </div>
    </div>
  </div>
  <div x-data="{ onhover: false, showVariant: false }" class="group relative w-full overflow-hidden bg-white">
    <a
      aria-label="{{ 'common.aria_label.product_image' | t }}"
      href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
      {% if product.images[1] != blank %}
        @mouseover="onhover = true"
        @mouseleave="onhover = false"
      {% endif %}
    >
      {% if product.featured_image != blank %}
        <div
          x-show="!onhover"
          class="w-full"
        >
          {{
            product.featured_image
            | image_url: width: 600
            | image_tag: loading: loading, fetchpriority: fetchpriority, class: image_class
          }}
        </div>
        {% if product.images[1] != blank %}
          <div
            x-show="onhover"
            x-ref="productImage"
            x-transition:enter="transition ease-out duration-500"
            x-transition:enter-start="scale-90"
            x-transition:enter-end="scale-100"
            class="w-full"
          >
            {{
              product.images[1]
              | image_url: width: 600
              | image_tag: loading: loading, fetchpriority: fetchpriority, class: image_class_scale
            }}
          </div>
        {% endif %}
      {% else %}
        {% render 'product-placeholder', image_class: image_class %}
      {% endif %}
    </a>
    <div
      {% if section.settings.button_action != 'go-to-product' %}
        @click="openModal = true"
      {% endif %}
      class="button absolute bottom-4 right-2 flex aspect-square items-center justify-center gap-4 {{ button_class }} md:hidden"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M7.5 6V6.75H5.51287C4.55332 6.75 3.74862 7.47444 3.64817 8.42872L2.38502 20.4287C2.26848 21.5358 3.13652 22.5 4.24971 22.5H19.7504C20.8636 22.5 21.7317 21.5358 21.6151 20.4287L20.352 8.42872C20.2515 7.47444 19.4468 6.75 18.4873 6.75H16.5V6C16.5 3.51472 14.4853 1.5 12 1.5C9.51472 1.5 7.5 3.51472 7.5 6ZM12 3C10.3431 3 9 4.34315 9 6V6.75H15V6C15 4.34315 13.6569 3 12 3ZM9 11.25C9 12.9069 10.3431 14.25 12 14.25C13.6569 14.25 15 12.9069 15 11.25V10.5C15 10.0858 15.3358 9.75 15.75 9.75C16.1642 9.75 16.5 10.0858 16.5 10.5V11.25C16.5 13.7353 14.4853 15.75 12 15.75C9.51472 15.75 7.5 13.7353 7.5 11.25V10.5C7.5 10.0858 7.83579 9.75 8.25 9.75C8.66421 9.75 9 10.0858 9 10.5V11.25Z" fill="white"/>
      </svg>
    </div>
    <div
      class="absolute bottom-4 left-0 hidden w-full justify-between gap-4 px-4 md:group-hover:flex"
    >
      {% liquid
        if product.available
          assign button_class = settings.buy_button_color | append: ' ' | append: settings.buy_button_style | append: ' ' | append: settings.buy_button_size
        endif
      %}
      {% liquid
        assign quantity_variants = 0
        assign quantity_colors = 0
        for option in product.options_with_values
          assign quantity_variants = forloop.index
          if option.name == 'Cor' or option.name == 'Color'
            assign quantity_colors = quantity_colors | plus: 1
          endif
        endfor
      %}
      <button
        {% if quantity_variants == 1 and quantity_colors == 1 %}
          {% if section.settings.button_action != 'go-to-product' %}
            @click="handleAdd()"
          {% endif %}
        {% elsif product.available and product.has_only_default_variant %}
          {% if section.settings.button_action != 'go-to-product' %}
            @click="handleAdd()"
          {% endif %}
        {% elsif product.available %}
          :disabled="loading"
          {% if section.settings.button_action != 'go-to-product' %}
            @click="showVariant = true"
          {% endif %}
        {% else %}
          disabled
        {% endif %}
        x-show="!showVariant"
        class="button w-full {{ button_class }}"
      >
        {% render 'loading-spinner' %}
        <div x-show="!loading">
          {% if product.available %}
            {{ section.settings.product_button_text | default: settings.buy_button_label }}
          {% else %}
            {{ 'common.sold_out' | t }}
          {% endif %}
          <span class="sr-only">{{ product.title }}</span>
        </div>
      </button>
      {%- unless product.has_only_default_variant -%}
        <div x-show="showVariant" class="w-full overflow-hidden shadow-lg">
          {%- for option in product.options_with_values -%}
            {% unless option.name == 'Cor' or option.name == 'Color' %}
              {% assign index = forloop.index0 %}
              <fieldset
                class="flex w-full gap-2"
                id="ProductSelect-option-{{ forloop.index0 }}-{{ section.id }}"
                name="{{ option.name | handleize }}"
              >
                <div class="flex w-full">
                  {%- for value in option.values -%}
                    {% liquid
                      assign option_variants = product.variants
                      for option_index in (1..index)
                        assign option_index0 = option_index | minus: 1
                        assign option_where = 'option' | append: option_index
                        assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                      endfor
                      assign index1 = index | plus: 1
                      assign option_where = 'option' | append: index1
                      assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                    %}
                    <input
                      type="radio"
                      {% if available_option_variants_size <= 0 %}
                        disabled="disabled"
                      {% endif %}
                      @change="handleAdd()"
                      value="{{ value | escape }}"
                      data-index="option{{ forloop.index }}"
                      name="{{ option.name | handleize }}"
                      id="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                      class="hidden"
                      x-model="selectedOptions[{{ index }}]"
                    >
                    <label
                      class="button selector {{ button_class }} w-full border-none p-2 {% if available_option_variants_size <= 0 %}cursor-default bg-neutral-400 text-neutral-600{% else %}button-white cursor-pointer text-accent{% endif %}"
                      for="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                    >
                      {{ value | escape }}
                    </label>
                  {%- endfor -%}
                </div>
              </fieldset>
            {% endunless %}
          {%- endfor -%}
        </div>
      {%- endunless -%}
    </div>
  </div>

  <div class="flex flex-col gap-6 px-2 py-4">
    <div>
      <a
        aria-label="{{ product.title }}"
        href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
      >
        <span class="{{ settings.title_color }} {{ settings.title_size }} product-title">{{ product.title }}</span>
      </a>
      {% assign installments = settings.installments_number %}
      {% assign product_variant = product.selected_or_first_available_variant %}
      <div class="flex items-center gap-1">
        <span class="price whitespace-nowrap font-bold {{ settings.price_color }} {{ settings.price_size }}">
          {{ product_variant.price | money }}
        </span>
        {% if installments > 1 %}
          {% liquid
            assign price = product.selected_or_first_available_variant.price | default: 0

            assign installments_max = price | divided_by: settings.installments_min_price | divided_by: 100 | round: 2 | at_most: settings.installments_number
            assign installment_fees = price | times: settings.installments_percentage_fees | divided_by: 100
            assign installment_price = price | plus: installment_fees | divided_by: installments_max

            assign value = installment_price | money
          %}
          {%- if installments_max > 1 -%}
            <p class="installment {{ settings.text_color }} {{ settings.text_size }}">
              {{ 'snippets.product_card.installments_value_2' | t: installments: installments_max, value: value }}
            </p>
          {%- endif -%}
        {% endif %}
      </div>
    </div>
    <div class="flex flex-shrink-0 items-center gap-2">
      {%- unless product.has_only_default_variant -%}
        {% if settings.product_type == 'metaobject' and product.metafields.luca.product_group != blank %}
          {% assign meta = product.metafields.luca.product_group.value %}
          {% for prod in meta.products.value %}
            {% assign color = 'bg-colors-' | append: prod.metafields.luca.color.value.name | handle %}
            <button
              aria-label="{{ 'common.aria_label.product_image' | t }}"
              {% if section.settings.button_action != 'go-to-product' %}
                @click="updateProductCard('{{ prod.handle }}')"
              {% endif %}
              class="selector h-6 w-6 cursor-pointer overflow-hidden rounded-full {{ color }} border {% if prod.url == product.url %}border-2 border-primary{% endif %}"
            >
              {% if prod.metafields.luca.color.value == blank %}
                {{-
                  prod.featured_image
                  | image_url: width: 100
                  | image_tag: loading: loading, fetchpriority: fetchpriority, class: 'selector h-8 w-8 object-cover'
                -}}
              {% endif %}
            </button>
          {% endfor %}
        {% else %}
          {%- for option in product.options_with_values -%}
            {% assign index = forloop.index0 %}
            <fieldset
              class="flex flex-col gap-2"
              id="ProductSelect-option-{{ forloop.index0 }}-{{ section.id }}"
              name="{{ option.name | handleize }}"
            >
              <div class="flex gap-2">
                {%- for value in option.values -%}
                  {% liquid
                    assign option_variants = product.variants
                    for option_index in (1..index)
                      assign option_index0 = option_index | minus: 1
                      assign option_where = 'option' | append: option_index
                      assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                    endfor
                    assign index1 = index | plus: 1
                    assign option_where = 'option' | append: index1
                    assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                  %}

                  {% if option.name == 'Cor' or option.name == 'Color' %}
                    {% assign color = value | handle %}
                    <input
                      type="radio"
                      {% if option.selected_value == value %}
                        checked="checked"
                      {% endif %}
                      {% if available_option_variants_size <= 0 %}
                        disabled
                      {% endif %}
                      value="{{ value | escape }}"
                      data-index="option{{ forloop.index }}"
                      name="{{ option.name | handleize }}"
                      id="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                      class="hidden"
                      x-model="selectedOptions[{{ index }}]"
                    >
                    <label
                      class="selector relative flex h-6 w-6 cursor-pointer items-center justify-center rounded-full {% if option.selected_value == value %}border-2 border-black{% else %}border border-gray-300{% endif %} {% if available_option_variants_size <= 0 %}cursor-not-allowed{% endif %}"
                      for="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                    >
                      <span class="sr-only">
                        {{ option.name | escape }}
                      </span>
                      <div
                        class="lazy-item h-4 w-4 rounded-full {% if available_option_variants_size <= 0 %}bg-gray-400{% else %}{% if color != blank %}bg-colors-{{ color }}{% endif %}{% endif %}"
                      ></div>
                    </label>
                  {% endif %}
                {%- endfor -%}
              </div>
            </fieldset>
          {%- endfor -%}
        {% endif %}
      {%- endunless -%}
    </div>
  </div>
</div>
