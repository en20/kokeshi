{%- liquid
  assign loading = 'eager'
  assign fetchpriority = 'auto'
  if section.index == 1
    assign fetchpriority = 'high'
  elsif section.index > 2
    assign loading = 'lazy'
  endif
-%}

<div
  x-data="
    {
      splide: null,
      current: 0,
      total: 0,
      init() {
        const splide = new Splide(this.$refs.slideshow, {
          arrows: false,
          direction: 'ttb',
          easing: 'ease',
          gap: 0,
          pagination: false,
          wheel: true,
          wheelSleep: 900,
          releaseWheel: true,
          waitForTransition: true,
          dragMinThreshold: {
            mouse: 50,
            touch: 10,
          },
        })

        const set = this.set.bind(this)

        splide.on('moved', function (newIndex, prevIndex, destIndex) {
          set()
        });

        splide.mount()

        this.splide = splide
        this.set()
      },
      changeDrag(drag) {
        this.splide.options = {
          drag
        }
      },
      reset() {
        this.splide.go(0)
      },
      set() {
        this.current = this.splide.index + 1
        this.total = this.splide.length

        if (this.current == this.total) {
          this.changeDrag(false)
        }
      },
      prev() {
        this.splide.go('<')
        this.set()
      },
      next() {
        this.splide.go('>')
        this.set()
      }
    }
  "
  x-intersect:enter.half="changeDrag(true)"
  x-intersect:leave="changeDrag(false); reset()"
>
  <div
    x-ref="slideshow"
    class="splide w-full"
    aria-label="{{ 'common.aria_label.gallery' | t }}"
  >
    <div class="splide__track">
      <ul class="splide__list">
        {% for block in section.blocks %}
          {% if block.type == 'divider' %}
            </ul>
            </div>
            <div x-show="splide.length > 1" class="carousel-bar absolute w-full bottom-[0.5px] h-[2px]">
              <div class="current-indicator absolute h-full bg-white transition-all duration-300"></div>
            </div>
            <button
              x-show="current != 1"
              @click="prev"
              class="{{ block.settings.text_color }} absolute left-0 top-1/2 px-3 py-2"
            >
              <svg
                width="13"
                height="33"
                viewBox="0 0 13 33"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
              >
                <path d="M12 1L1 16.5L12 32" stroke="currentColor" stroke-linecap="round"/>
              </svg>
              <span class="sr-only">{{ 'common.sr_only.previous' | t }}</span>
            </button>
            <button
              x-show="current != total"
              @click="next"
              class="{{ block.settings.text_color }} absolute right-0 top-1/2 px-3 py-2"
            >
              <svg
                width="13"
                height="33"
                viewBox="0 0 13 33"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
              >
                <path d="M1 1L12 16.5L1 32" stroke="currentColor" stroke-linecap="round"/>
              </svg>
              <span class="sr-only">{{ 'common.sr_only.next' | t }}</span>
            </button>
            </div>
            </div>
            </li>
            <li
              class="splide__slide carousel-item"
            >
              <div
                x-data="
                  {
                    splide: null,
                    current: 0,
                    total: 0,
                    init() {
                      const splide = new Splide(this.$refs.slideshowInternal, {
                        arrows: false,
                        gap: 0,
                        pagination: false,
                      })

                      const bar = splide.root.querySelector('.current-indicator')

                      if (bar != null) {
                        splide.on('mounted move', function () {
                          const end  = splide.Components.Controller.getEnd() + 1
                          const rate = Math.min((splide.index) / end, 1 )
                          bar.style.width = String(100 / end) + '%'
                          bar.style.left = String( 100 * rate ) + '%'
                        })
                      }

                      const set = this.set.bind(this)

                      splide.on('moved', function (newIndex, prevIndex, destIndex) {
                        set()
                      });

                      splide.mount()

                      this.splide = splide
                      this.set()
                    },
                    set() {
                      this.current = this.splide.index + 1
                      this.total = this.splide.length
                    },
                    prev() {
                      this.splide.go('<')
                      this.set()
                    },
                    next() {
                      this.splide.go('>')
                      this.set()
                    }
                  }
                "
              >
                <div
                  x-ref="slideshowInternal"
                  class="splide carousel w-full"
                  aria-label="Slide"
                >
                  <div class="splide__track">
                    <ul class="splide__list">
          {% endif %}
          {% if forloop.first %}
            <li
              class="splide__slide carousel-item"
            >
              <div
                x-data="
                  {
                    splide: null,
                    current: 0,
                    total: 0,
                    init() {
                      const splide = new Splide(this.$refs.slideshowInternal, {
                        arrows: false,
                        gap: 0,
                        pagination: false,
                        type: 'loop',
                        autoplay: true,
                        interval: 7000
                      })

                      const bar = splide.root.querySelector('.current-indicator')

                      if (bar != null) {
                        splide.on('mounted move', function () {
                          const end  = splide.Components.Controller.getEnd() + 1
                          const rate = Math.min((splide.index) / end, 1 )
                          bar.style.width = String(100 / end) + '%'
                          bar.style.left = String( 100 * rate ) + '%'
                        })
                      }

                      const set = this.set.bind(this)

                      splide.on('moved', function (newIndex, prevIndex, destIndex) {
                        set()
                      });

                      splide.mount()

                      this.splide = splide
                      this.set()
                    },
                    set() {
                      this.current = this.splide.index + 1
                      this.total = this.splide.length
                    },
                    prev() {
                      this.splide.go('<')
                      this.set()
                    },
                    next() {
                      this.splide.go('>')
                      this.set()
                    }
                  }
                "
              >
                <div
                  x-ref="slideshowInternal"
                  class="splide w-full"
                  aria-label="Slide"
                >
                  <div class="splide__track">
                    <ul class="splide__list">
          {% endif %}
          {% case block.type %}
            {% when 'video' %}
              <li class="splide__slide">
                {% assign video_id = block.settings.video.id %}
                <div
                  x-data="{ play: true, muted: true }"
                  x-init="$watch('play', (value) => $refs.video_{{ video_id }}[value ? 'play' : 'pause']())"
                  {% if block.settings.video_url != blank %}
                    @click="location.href = '{{ block.settings.video_url }}'"
                  {% endif %}
                  class="relative isolate overflow-hidden {% if block.settings.video_url != blank %}cursor-pointer{% endif %}"
                >
                  {% if block.settings.video == blank %}
                    <video
                      x-ref="video"
                      @play="play = true"
                      @pause="play = false"
                      class="absolute video carousel-item-video inset-0 -z-20 h-dvh w-screen object-cover object-center"
                      autoplay
                      loop
                      muted
                      h-dvh
                      playsinline
                    >
                      <source src="{{ 'video-placeholder.mp4' | asset_url }}" type="video/mp4">
                    </video>
                  {% else %}
                    <video
                      x-ref="video_{{ video_id }}"
                      @play="play = true"
                      @pause="play = false"
                      class="absolute video carousel-item-video inset-0 -z-20 h-dvh w-screen object-cover object-center"
                      autoplay
                      loop
                      muted
                      playsinline
                    >
                      {% for source in block.settings.video.sources %}
                        <source src="{{ source.url }}" type="{{ source.mime_type }}">
                      {% endfor %}
                    </video>
                  {%- endif -%}
                  <div
                    class="absolute inset-0 -z-10 h-dvh w-screen object-cover object-center {{ block.settings.cover_color }} {{ block.settings.cover_opacity }}"
                  ></div>
                  <div class="wrapper relative z-10 flex h-dvh items-center {{ block.settings.text_align }}">
                    <div class="md:w-2/4">
                      <h2 class="carousel-item-title font-serif font-bold {{ block.settings.text_color }} {{ block.settings.text_size }}">
                        {{ block.settings.title }}
                      </h2>
                      <div class="carousel-item-description mt-6 {{ block.settings.description_color }} {{ block.settings.description_size }}">
                        {{ block.settings.description }}
                      </div>
                      {% if block.settings.button_url != blank %}
                        <div class="mt-6 inline-flex gap-4 md:mt-8">
                          <a
                            aria-label="{{- block.settings.button -}}"
                            class="{{ block.settings.button_type }} {{ block.settings.button_color }}"
                            href="{{ block.settings.button_url | default: '#' }}"
                          >
                            {{- block.settings.button -}}
                          </a>
                        </div>
                      {% endif %}
                    </div>
                  </div>
                  <div class="absolute flex items-center justify-between wrapper py-2 pb-4 bottom-0 w-full z-10">
                    <div>
                      <button
                        aria-label="{{ 'common.aria_label.play' | t }}"
                        @click="play = true"
                        x-show="!play"
                        class="flex items-center"
                      >
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M3.75 4.7106C3.75 3.52216 5.02417 2.76878 6.0655 3.34151L15.6827 8.63095C16.762 9.22458 16.762 10.7755 15.6827 11.3691L6.0655 16.6586C5.02416 17.2313 3.75 16.4779 3.75 15.2895V4.7106Z" fill="white"/>
                        </svg>
                      </button>
                      <button
                        aria-label="{{ 'common.aria_label.pause' | t }}"
                        @click="play = false"
                        x-show="play"
                        class="flex items-center"
                      >
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M5.75 3C5.33579 3 5 3.33579 5 3.75V16.25C5 16.6642 5.33579 17 5.75 17H7.25C7.66421 17 8 16.6642 8 16.25V3.75C8 3.33579 7.66421 3 7.25 3H5.75Z" fill="white"/>
                          <path d="M12.75 3C12.3358 3 12 3.33579 12 3.75V16.25C12 16.6642 12.3358 17 12.75 17H14.25C14.6642 17 15 16.6642 15 16.25V3.75C15 3.33579 14.6642 3 14.25 3H12.75Z" fill="white"/>
                        </svg>
                      </button>
                    </div>
                    <div>
                      <button
                        aria-label="{{ 'common.aria_label.mute' | t }}"
                        @click="muted = true"
                        x-show="!muted"
                        class="flex items-center"
                      >
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M11.25 3.38385C11.25 2.27023 9.90358 1.71251 9.11612 2.49997L5.36612 6.24997H3.75755C2.80643 6.24997 1.82588 6.80367 1.54109 7.83752C1.35123 8.52675 1.25 9.25204 1.25 9.99997C1.25 10.7479 1.35123 11.4732 1.54109 12.1624C1.82588 13.1963 2.80643 13.75 3.75755 13.75H5.36612L9.11612 17.5C9.90358 18.2874 11.25 17.7297 11.25 16.6161V3.38385Z" fill="white"/>
                          <path d="M15.4864 4.25467C15.7305 4.0106 16.1262 4.0106 16.3703 4.25467C19.5433 7.42768 19.5433 12.5721 16.3703 15.7452C16.1262 15.9892 15.7305 15.9892 15.4864 15.7452C15.2423 15.5011 15.2423 15.1054 15.4864 14.8613C18.1713 12.1764 18.1713 7.82341 15.4864 5.13856C15.2423 4.89448 15.2423 4.49875 15.4864 4.25467Z" fill="white"/>
                          <path d="M13.2769 6.46445C13.521 6.22037 13.9167 6.22037 14.1608 6.46445C16.1134 8.41707 16.1134 11.5829 14.1608 13.5355C13.9167 13.7796 13.521 13.7796 13.2769 13.5355C13.0329 13.2914 13.0329 12.8957 13.2769 12.6516C14.7414 11.1872 14.7414 8.8128 13.2769 7.34834C13.0329 7.10426 13.0329 6.70853 13.2769 6.46445Z" fill="white"/>
                        </svg>
                      </button>
                      <button
                        aria-label="{{ 'common.aria_label.unmute' | t }}"
                        @click="muted = false"
                        x-show="muted"
                        class="flex items-center"
                      >
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 001.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06zM17.78 9.22a.75.75 0 10-1.06 1.06L18.44 12l-1.72 1.72a.75.75 0 001.06 1.06l1.72-1.72 1.72 1.72a.75.75 0 101.06-1.06L20.56 12l1.72-1.72a.75.75 0 00-1.06-1.06l-1.72 1.72-1.72-1.72z" fill="white" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </li>
            {% when 'banner' %}
              <li
                class="splide__slide carousel-item"
              >
                <div
                  {% if block.settings.image_url != blank %}
                    @click="location.href = '{{ block.settings.image_url }}'"
                  {% endif %}
                  class="h-full isolate overflow-hidden {% if block.settings.image_url != blank %}cursor-pointer{% endif %}"
                >
                  {% if block.settings.cover != blank %}
                    {% liquid
                      assign image_class = 'image carousel-item-image object-cover w-full h-full object-center'
                      if block.settings.cover_mobile != blank
                        assign image_desktop_class = image_class | append: ' hidden lg:block'
                        assign image_mobile_class = image_class | append: ' lg:hidden'
                      else
                        assign image_desktop_class = image_class
                        assign image_mobile_class = image_class
                      endif
                    %}
                    {{
                      block.settings.cover
                      | image_url: width: 1920
                      | image_tag: loading: loading, class: image_desktop_class
                    }}
                    {% if block.settings.cover_mobile != blank %}
                      {{
                        block.settings.cover_mobile
                        | image_url: width: 600
                        | image_tag: loading: loading, class: image_mobile_class
                      }}
                    {% endif %}
                  {% elsif block.settings.cover_mobile == blank %}
                    {% render 'banner-placeholder', image_class: image_desktop_class %}
                  {% endif %}
                  <div
                    style="object-fit: contain;"
                    class="inset-0 -z-10 h-full w-full object-right md:object-center {{ block.settings.cover_color }} {{ block.settings.cover_opacity }}"
                  ></div>
                  {% if block.settings.title != blank or block.settings.description != blank %}
                    <div class="wrapper flex items-center {{ block.settings.text_align }}">
                      <div class="md:w-2/4">
                        <h2 class="carousel-item-title font-serif font-bold {{ block.settings.text_color }} {{ block.settings.text_size }}">
                          {{ block.settings.title }}
                        </h2>
                        <div class="carousel-item-description mt-6 {{ block.settings.description_color }} {{ block.settings.description_size }}">
                          {{ block.settings.description }}
                        </div>
                        {% if block.settings.button_url != blank %}
                          <div class="mt-6 inline-flex gap-4 md:mt-8">
                            <a
                              aria-label="{{- block.settings.button -}}"
                              class="{{ block.settings.button_type }} {{ block.settings.button_color }}"
                              href="{{ block.settings.button_url | default: '#' }}"
                            >
                              {{- block.settings.button -}}
                            </a>
                          </div>
                        {% endif %}
                      </div>
                    </div>
                  {% endif %}
                </div>
              </li>
          {% endcase %}
          {% if forloop.last %}
            </ul>
            </div>
            <div x-show="splide.length > 1" class="carousel-bar absolute w-full bottom-[0.5px] h-[2px]">
              <div class="current-indicator absolute h-full bg-white transition-all duration-300"></div>
            </div>
            <button
              x-show="current != 1"
              @click="prev"
              class="{{ block.settings.text_color }} absolute left-0 top-1/2 px-3 py-2"
            >
              <svg
                width="13"
                height="33"
                viewBox="0 0 13 33"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
              >
                <path d="M12 1L1 16.5L12 32" stroke="currentColor" stroke-linecap="round"/>
              </svg>
              <span class="sr-only">{{ 'common.sr_only.previous' | t }}</span>
            </button>
            <button
              x-show="current != total"
              @click="next"
              class="{{ block.settings.text_color }} absolute right-0 top-1/2 px-3 py-2"
            >
              <svg
                width="13"
                height="33"
                viewBox="0 0 13 33"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
              >
                <path d="M1 1L12 16.5L1 32" stroke="currentColor" stroke-linecap="round"/>
              </svg>
              <span class="sr-only">{{ 'common.sr_only.next' | t }}</span>
            </button>
            </div>
            </div>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
</div>

{% schema %}
{
  "tag": "section",
  "name": "t:sections.hero_gallery.name",
  "class": "hero-gallery",
  "blocks": [
    {
      "name": "t:sections.hero_gallery.blocks.banner.name",
      "type": "banner",
      "settings": [
        {
          "type": "header",
          "content": "t:common.headers.alignment"
        },
        {
          "id": "text_align",
          "type": "select",
          "label": "t:common.labels.alignment.select",
          "default": "text-left justify-start",
          "options": [
            {
              "label": "t:common.alignments.left",
              "value": "text-left justify-start"
            },
            {
              "label": "t:common.alignments.center",
              "value": "text-center justify-center"
            },
            {
              "label": "t:common.alignments.right",
              "value": "text-right justify-end"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:common.headers.title"
        },
        {
          "id": "text_size",
          "type": "select",
          "label": "t:common.labels.title.size",
          "default": "text-h3 md:text-h1",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "text-h3 md:text-h1"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "text-h4 md:text-h3"
            },
            {
              "label": "t:common.sizes.small",
              "value": "text-h6 md:text-h5"
            }
          ]
        },
        {
          "id": "text_color",
          "type": "select",
          "label": "t:common.labels.title.color",
          "default": "text-black",
          "options": [
            {
              "label": "t:common.colors.black",
              "value": "text-black"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "text-neutral-600"
            },
            {
              "label": "t:common.colors.white",
              "value": "text-white"
            },
            {
              "label": "t:common.colors.primary",
              "value": "text-primary"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "text-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "text-tertiary"
            }
          ]
        },
        {
          "id": "title",
          "type": "text",
          "label": "t:common.labels.title.write",
          "default": "Lorem ipsum dolor sit amet"
        },
        {
          "type": "header",
          "content": "t:common.headers.text"
        },
        {
          "id": "description_size",
          "type": "select",
          "label": "t:common.labels.text.size",
          "default": "text-body-base",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "text-body-lg"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "text-body-base"
            },
            {
              "label": "t:common.sizes.small",
              "value": "text-body-sm"
            }
          ]
        },
        {
          "id": "description_color",
          "type": "select",
          "label": "t:common.labels.text.color",
          "default": "text-white",
          "options": [
            {
              "label": "t:common.colors.black",
              "value": "text-black"
            },
            {
              "label": "t:common.colors.white",
              "value": "text-white"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "text-neutral"
            },
            {
              "label": "t:common.colors.primary",
              "value": "text-primary"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "text-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "text-tertiary"
            }
          ]
        },
        {
          "id": "description",
          "type": "richtext",
          "label": "t:common.labels.text.write",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat.</p>"
        },
        {
          "type": "header",
          "content": "t:common.headers.buttons"
        },
        {
          "id": "button",
          "type": "text",
          "label": "t:common.labels.button.write",
          "default": "Botão"
        },
        {
          "id": "button_url",
          "type": "url",
          "label": "t:common.labels.link.write"
        },
        {
          "id": "button_type",
          "type": "select",
          "label": "t:common.labels.button.style",
          "default": "button",
          "options": [
            {
              "label": "t:common.styles.button.solid",
              "value": "button"
            },
            {
              "label": "t:common.styles.button.outline",
              "value": "button button-outline"
            },
            {
              "label": "t:common.styles.button.link",
              "value": "button button-link"
            }
          ]
        },
        {
          "id": "button_color",
          "type": "select",
          "label": "t:common.labels.button.color",
          "default": "button-primary",
          "options": [
            {
              "label": "t:common.colors.primary",
              "value": "button-primary"
            },
            {
              "label": "t:common.colors.accent",
              "value": "button-accent"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "button-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "button-tertiary"
            },
            {
              "label": "t:common.colors.black",
              "value": "button-black"
            },
            {
              "label": "t:common.colors.white",
              "value": "button-white"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:common.headers.image"
        },
        {
          "id": "cover_color",
          "type": "select",
          "label": "t:sections.hero_gallery.blocks.banner.settings.cover_color.label",
          "default": "bg-white",
          "options": [
            {
              "label": "t:common.colors.white",
              "value": "bg-white"
            },
            {
              "label": "t:common.colors.black",
              "value": "bg-black"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "bg-neutral"
            },
            {
              "label": "t:common.colors.primary",
              "value": "bg-primary"
            }
          ]
        },
        {
          "id": "cover_opacity",
          "type": "select",
          "label": "t:sections.hero_gallery.blocks.banner.settings.cover_opacity.label",
          "default": "opacity-0",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "opacity-90"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "opacity-70"
            },
            {
              "label": "t:common.sizes.small",
              "value": "opacity-30"
            },
            {
              "label": "t:common.sizes.none",
              "value": "opacity-0"
            }
          ]
        },
        {
          "id": "cover",
          "type": "image_picker",
          "label": "t:common.labels.image.select_desktop"
        },
        {
          "id": "cover_mobile",
          "type": "image_picker",
          "label": "t:common.labels.image.select_mobile"
        },
        {
          "id": "image_url",
          "type": "url",
          "label": "t:common.labels.link.write"
        }
      ]
    },
    {
      "name": "t:sections.hero_gallery.blocks.video.name",
      "type": "video",
      "settings": [
        {
          "type": "header",
          "content": "t:common.headers.alignment"
        },
        {
          "id": "text_align",
          "type": "select",
          "label": "t:common.labels.alignment.select",
          "default": "text-left justify-start",
          "options": [
            {
              "label": "t:common.alignments.left",
              "value": "text-left justify-start"
            },
            {
              "label": "t:common.alignments.center",
              "value": "text-center justify-center"
            },
            {
              "label": "t:common.alignments.right",
              "value": "text-right justify-end"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:common.headers.title"
        },
        {
          "id": "text_size",
          "type": "select",
          "label": "t:common.labels.title.size",
          "default": "text-h3 md:text-h1",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "text-h3 md:text-h1"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "text-h4 md:text-h3"
            },
            {
              "label": "t:common.sizes.small",
              "value": "text-h6 md:text-h5"
            }
          ]
        },
        {
          "id": "text_color",
          "type": "select",
          "label": "t:common.labels.title.color",
          "default": "text-black",
          "options": [
            {
              "label": "t:common.colors.black",
              "value": "text-black"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "text-neutral-600"
            },
            {
              "label": "t:common.colors.white",
              "value": "text-white"
            },
            {
              "label": "t:common.colors.primary",
              "value": "text-primary"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "text-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "text-tertiary"
            }
          ]
        },
        {
          "id": "title",
          "type": "text",
          "label": "t:common.labels.title.write",
          "default": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        },
        {
          "type": "header",
          "content": "t:common.headers.text"
        },
        {
          "id": "description_size",
          "type": "select",
          "label": "t:common.labels.text.size",
          "default": "text-body-base",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "text-body-lg"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "text-body-base"
            },
            {
              "label": "t:common.sizes.small",
              "value": "text-body-sm"
            }
          ]
        },
        {
          "id": "description_color",
          "type": "select",
          "label": "t:common.labels.text.color",
          "default": "text-black",
          "options": [
            {
              "label": "t:common.colors.black",
              "value": "text-black"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "text-neutral-600"
            },
            {
              "label": "t:common.colors.white",
              "value": "text-white"
            },
            {
              "label": "t:common.colors.primary",
              "value": "text-primary"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "text-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "text-tertiary"
            }
          ]
        },
        {
          "id": "description",
          "type": "richtext",
          "label": "t:common.labels.text.write",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique.</p>"
        },
        {
          "type": "header",
          "content": "t:common.headers.buttons"
        },
        {
          "id": "button",
          "type": "text",
          "label": "t:common.labels.button.write",
          "default": "Botão"
        },
        {
          "id": "button_url",
          "type": "url",
          "label": "t:common.labels.link.write"
        },
        {
          "id": "button_type",
          "type": "select",
          "label": "t:common.labels.button.style",
          "default": "button",
          "options": [
            {
              "label": "t:common.styles.button.solid",
              "value": "button"
            },
            {
              "label": "t:common.styles.button.outline",
              "value": "button button-outline"
            },
            {
              "label": "t:common.styles.button.link",
              "value": "button button-link"
            }
          ]
        },
        {
          "id": "button_color",
          "type": "select",
          "label": "t:common.labels.button.color",
          "default": "button-primary",
          "options": [
            {
              "label": "t:common.colors.primary",
              "value": "button-primary"
            },
            {
              "label": "t:common.colors.accent",
              "value": "button-accent"
            },
            {
              "label": "t:common.colors.secondary",
              "value": "button-secondary"
            },
            {
              "label": "t:common.colors.tertiary",
              "value": "button-tertiary"
            },
            {
              "label": "t:common.colors.black",
              "value": "button-black"
            },
            {
              "label": "t:common.colors.white",
              "value": "button-white"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:common.headers.video"
        },
        {
          "id": "cover_color",
          "type": "select",
          "label": "t:sections.hero_gallery.blocks.video.settings.cover_color.label",
          "default": "bg-white",
          "options": [
            {
              "label": "t:common.colors.white",
              "value": "bg-white"
            },
            {
              "label": "t:common.colors.black",
              "value": "bg-black"
            },
            {
              "label": "t:common.colors.neutral",
              "value": "bg-neutral"
            },
            {
              "label": "t:common.colors.primary",
              "value": "bg-primary"
            }
          ]
        },
        {
          "id": "cover_opacity",
          "type": "select",
          "label": "t:sections.hero_gallery.blocks.video.settings.cover_opacity.label",
          "default": "opacity-0",
          "options": [
            {
              "label": "t:common.sizes.large",
              "value": "opacity-90"
            },
            {
              "label": "t:common.sizes.medium",
              "value": "opacity-70"
            },
            {
              "label": "t:common.sizes.small",
              "value": "opacity-30"
            },
            {
              "label": "t:common.sizes.none",
              "value": "opacity-0"
            }
          ]
        },
        {
          "id": "video",
          "type": "video",
          "label": "t:common.labels.video.select"
        },
        {
          "id": "video_url",
          "type": "url",
          "label": "t:common.labels.link.write"
        }
      ]
    },
    {
      "name": "t:sections.hero_gallery.blocks.divider.name",
      "type": "divider",
      "settings": []
    }
  ],
  "presets": [
    {
      "name": "t:sections.hero_gallery.name",
      "blocks": [
        {
          "type": "banner"
        },
        {
          "type": "banner"
        },
        {
          "type": "divider"
        },
        {
          "type": "banner"
        }
      ]
    }
  ]
}
{% endschema %}
